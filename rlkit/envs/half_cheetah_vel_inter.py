import numpy as np
import random
from . import register_env
from .half_cheetah import HalfCheetahEnv


@register_env('cheetah-vel-inter')
class HalfCheetahVelInterEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """
    def __init__(self, task={}, num_train_tasks=2, eval_tasks_list=[], randomize_tasks=True, env_type='train', sparse=False, goal_radius=0.5):
        self.env_type = env_type
        self._task = task
        self.n_train_tasks = num_train_tasks
        self.eval_tasks_list = eval_tasks_list

        self.tasks = self.sample_tasks()

        self._goal_vel = self.tasks[0].get('velocity', 0.0)
        self._goal = self._goal_vel
        self.goal_radius = goal_radius
        self.sparse = sparse
        super(HalfCheetahVelInterEnv, self).__init__()

    def step(self, action):
        xposbefore = self.sim.data.qpos[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.sim.data.qpos[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        sparse_reward = self.sparsify_rewards(forward_reward)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost
        sparse_reward = sparse_reward - ctrl_cost
        if self.sparse==True:
            reward = sparse_reward
        done = False
        infos = dict(reward_forward=forward_reward, reward_ctrl=-ctrl_cost, task=self._task)
        return (observation, reward, done, infos)

    def sample_tasks(self):
        # np.random.seed(1337)
        # if self.env_type == 'test':
        #     velocities = np.random.uniform(0.0, 3.0, size=(num_tasks,))
        #     tasks = [{'velocity': velocity} for velocity in velocities]
        # else:
        #     velocities = np.random.uniform(0.0, 3.0, size=(num_tasks,))
        #     tasks = [{'velocity': velocity} for velocity in velocities]
        # return tasks
        if self.env_type == 'train':
            velocities = []
            for i in range(self.n_train_tasks):
                velocities.append(random.uniform(0, 0.5) if random.random() >= 0.5 else random.uniform(3.0, 3.5))

        elif self.env_type == 'test':
            if len(self.eval_tasks_list) > 0:
                velocities = self.eval_tasks_list
            else:
                train_tsne_tasks = [0.1, 0.2, 0.3, 0.4, 0.5] + [3.0, 3.1, 3.2, 3.3, 3.4, 3.5]  # 11개
                test_tsne_tasks = [0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9]  # 24개
                velocities = train_tsne_tasks + test_tsne_tasks
        else:
            velocities = None

        tasks = [{'velocity': velocity} for velocity in velocities]
        return tasks

    def sparsify_rewards(self, r):
        ''' zero out rewards when outside the goal radius '''
        #mask = (r >= -self.goal_radius).astype(np.float32)
        #r = r * mask
        if r < - self.goal_radius:
            r = -2
        r = r + 2
        return r

    def get_all_task_idx(self):
        return range(len(self.tasks))

    def reset_task(self, idx):
        self._task = self.tasks[idx]
        self._goal_vel = self._task['velocity']
        self._goal = self._goal_vel
        self.reset()
